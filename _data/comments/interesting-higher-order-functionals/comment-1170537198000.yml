name: cgibbard
date: '2007-02-03 22:13:18'
url: 'http://'
message: "I was just playing around with a function of order 5, and saw this blog post, so I thought I'd comment.\n\nCall-with-current-continuation in a language with first class continuations (making the type system correspond to classical logic) has type `((p -> q) -> p) -> p`, and so is order 3. However, without first class continuations, this type becomes uninhabited.\n\nThe natural analogue of call/cc when you don't have first class continuations has type:\n`((((p -> k) -> k) -> ((q -> k) -> k)) -> ((p -> k) -> k)) -> ((p -> k) -> k)`\nmaking it order 5. The translation from classical to intuitionist logic increases the order by 2. I think it's reasonable enough to conclude that it's important, given that one form of it is distributed with most Haskell implementations as Control.Monad.Cont.callCC, in the instance of MonadCont for the type Cont k. Whether this qualifies as something having an analogue at a lower order is an interesting question. In order to lower the order of the function to make it more comprehensible, the libraries introduce the type constructor Cont, such that Cont k a is isomorphic to `((a -> k) -> k)`, which brings the order back down to 3. (Cont k) is then made a monad instance, and callCC is implemented for it in the instance of MonadCont. The implementation needs to actually use the structure of the type of course, making it 5th order, at least in terms of how you have to look at it during implementation."
email: 1d86a6cad1a1713a2c5ae9c0f2926bad
