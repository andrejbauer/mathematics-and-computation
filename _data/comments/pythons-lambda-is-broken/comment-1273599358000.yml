name: Edvard Karlsen
date: '2010-05-11 19:35:58'
url: ''
message: "I don't see the big problem here. Obviously, it's a bit confusing, but as others have stated, this is often the way closures are implemented in modern multi-paradigm languages. In my opinion, this behaviour should be expected in this language with so much mutable state. Anyway, the problem here is not that the lambdas capture values, but how the for loop works.\r\n\r\nHowever, to repeat earlier posters, there are other solutions.\r\n\r\n<code>\r\n&gt;&gt;&gt; a = lambda n: lambda nn: n + nn\r\n&gt;&gt;&gt; a(3)(5)\r\n8\r\n</code>\r\n\r\nStarting with this approach is imho more flexible, clearer, reads better and possibly more memory efficient. If one then should need/want a list of a specific lambdas of this form, one could do so with classic list comprehension as suggested earlier. Stuff like \"i=i\" etc. are hacks that can easily be avoided :)"
email: 9544dd47641f330192df46a1e2ae10da
