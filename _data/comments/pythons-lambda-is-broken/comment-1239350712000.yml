name: Andrej Bauer
date: '2009-04-10 10:05:12'
url: 'http://andrej.com/'
message: "Dear DriveByComment: you did manage to respond in an offending manner. Before you accuse me of not knowing about programming languages, you should perhaps look around to see who I am and what I do. I do know a bit about the theory of programming languages, you know.\n\nBut leaving personal attacks aside, I do not understand your comment. I claim the features that lead to the behavior of Python, as demonstrated above, are design errors. You interpreted that as my not understanding Python (its scoping rules). I repeat: the decisions in the design of Python which lead to the above behavior are bad, i.e., the way Python actually behaves (not the way I think it behaves) is wrong.\n\nI see two problems. The one that is easy to fix is the craziness with variables escaping the scope of a list comprehension or a loop. As jaux (comment 24) pointed out Python 3.0 fixes list comprehensions, and probably leaves the loops broken for backward compatibility.\n\nThe second problem causes lambda to behave unexpectedly, but trouble really lies with Python's idea of how scoping and environments work, so there is no easy fix. For example, in a sane programming language this should cause an error of the kind <em>\"I don't know what <code>i</code> is\"</em>:\n<blockquote><pre>>>> def g(n): return n + i</pre></blockquote>\nBut Python happily accepts the definition and emits an error message when <code>g</code> is applied. This is going to confuse the programmer, because the error message points to the wrong place. I understand what the benefits are (such as allowing mutually recursive definitions without forward declarations), but they do not outweigh the trouble that the design decision causes."
email: 59d57d95bc7c45ced5f1969279cec06b
