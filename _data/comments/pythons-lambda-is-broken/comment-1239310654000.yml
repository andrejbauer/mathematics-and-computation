name: grainednoise
date: '2009-04-09 22:57:34'
url: ''
message: "This has nothing to do with lambdas, but with the scoping rules of Python. Not being privy to the inner workings of the implementors' minds, I can only guess at 'what they were thinking', but it's probably something along the lines of 'simple to implement and easy to explain'.\r\n\r\nEach call to a function/lambda creates a scope. Any function/lambda defined within that scope has access to that scope (albeit strictly read-only in Python 2.x) but all functions/lambdas defined within that call share the same outer scope.\r\n\r\nAnyway, the fix is quite simple (and you basically found that solution yourself already):\r\n\r\nfs = [(lambda n, addend=i: addend + n) for i in range(10)]\r\n\r\nThe trick here is that default values of parameters are evaluated just once when the function/lambda is created. This, too, is sometimes unknown to less experienced Python programmers. To quote a co-worker completely out of context: \"It's really intuitive once it's explained to you!\""
email: ac58cb39ad7db6a6e38233ca1c932656
