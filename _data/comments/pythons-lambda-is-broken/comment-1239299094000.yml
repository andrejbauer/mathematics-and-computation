name: mcmanus
date: '2009-04-09 19:44:54'
url: ''
message: "Actually, the implementors of Python are no crazy (or maybe they are, but not for that reason).\r\nThe fact is, Python is not primarily a functional language and thus variables are by default \r\nmutable object.\r\nWhen in your examples the closure is created, i is a reference in a way, not a value. \r\nTake the following Python example :\r\n&gt;&gt;&gt; i = 1\r\n&gt;&gt;&gt; def f(): return i \r\n&gt;&gt;&gt; f()\r\n1\r\n&gt;&gt;&gt; i = 2\r\n&gt;&gt;&gt; f()\r\n2\r\nI think that everybody expect this behavior and nobody would want \r\nthe second  call to f() to return 1. \r\nSo yes, I can get that in the example you show the comportement may \r\nseems surprising and yes I'm sure it is not the simpliest thing to explain \r\nto student but lambda in Python are not broken. They are just lambda in \r\na non functional language.  \r\nNote that you can \"emulate\" the same comportement in Haskell by using \r\nreferences (but it will involve a monad and not be as clean as the 2 lines \r\nyou give)."
email: f7975465852d12c9f135d45fc403a1b6
