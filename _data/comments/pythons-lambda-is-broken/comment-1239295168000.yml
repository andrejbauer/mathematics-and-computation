name: yeshuaaaron
date: '2009-04-09 18:39:28'
url: ''
message: "I'm not particularly familiar with Python, but Lisp folks sometimes run into the same problem using lambda with loop.  It's not a problem with lambda, but rather a question whether loop variables are assigned to on each iteration or whether a new binding is established.  (See http://groups.google.com/group/comp.lang.lisp/msg/3838212e836ff0ca for a recent manifestation.)  The difference is essentially:\n\nEstablish a binding i; For each integer in the range do: *set* i to the integer and evaluate the body of the iteration construct.\n\nvs.\n\nFor each integer in the range: establish a new binding from i to the integer and evaluate the body the iteration construct.\n\nI think the same issue is described here: http://mail.python.org/pipermail/python-list/2003-September/224902.html .  It seems that Python's lambda isn't broken, but that there's not a convenient way to establish local bindings.\n\nIndeed, consider:\n\n&gt;&gt;&gt; def makeAdder(i): return (lambda n: i + n)\n...\n\n&gt;&gt;&gt; fs = [makeAdder(i) for i in range(10)]\n\n&gt;&gt;&gt; [f(4) for f in fs]\n\n[4, 5, 6, 7, 8, 9, 10, 11, 12, 13]"
email: e0f40abace9f7ccba76f9c954e38f9d1
