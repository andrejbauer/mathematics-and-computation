name: Matija Pretnar
date: '2012-03-22 13:26:06'
url: 'http://matija.pretnar.info'
message: "What about toplevel handlers or other alternatives to resources? First imagine how a handler should handle a toplevel (non-delimited) continuation. As soon as a handler applies it to some value, the continuation never yields back control and whatever follows it in the handler is discarded. Furthermore, the continuation should be called at least once (I'll discuss this later), otherwise eff would abruptly exit.\n\nThus, each toplevel handler is more or less some computation followed by an application of the continuation to a given value. What if this computation triggers some operations? Since these operations happen at the toplevel, we cannot handle them as they have escaped all handlers. We had an implementation that worked like this for some time, but there were no obvious advantages, all while the implementation was hacked together, the behaviour was wildly unpredictable, and the (pretty neat, we probably agree) abstraction of effects that eff provides was broken.\n\nIn the end, we decided to allow only pure computations at the top-level. So, you have some pure computation that in the end passes a result to the toplevel continuation. But this is exactly what a resource does, except that you only compute the result while the passing to the continuation is implicit.\n\nWhat if you do not call the continuation, but instead call some special toplevel abort operation? What exactly should this operation be, if it is not a standard exception?\n\n1. If it is a special extension of eff that can be used only in resources, why would we use it? One reason was that for some exceptions, you want to have a nicer error message than the usual \"Uncaught operation ...#raise ...\". For this reason, we have a built-in function <code>exception</code> (declared in the pervasives) that generates exceptions with resources that do just that. So we can get the same benefit without any extensions.\n2. If it is a special extension that can be used everywhere, it again breaks the abstraction of effects, as there is a way to perform effects without operations."
email: 81edd40c675051c393c53f72b7c1428a
