name: sam
date: '2009-04-11 23:58:18'
url: 'http://'
message: "Here's a proof sketch to show that simply-typed lambda calculus with\nproducts and infinitely many base types does not have booleans.\n\nThe key idea is to show that if we can define booleans then the\nBoolean type must contain every base type as a subformula, and\ntherefore must be infinite. Infinite types are not allowed, hence we\ncannot define a Boolean type. (If we do allow infinite types and\ninfinite terms then it is easy to define a Boolean type.)\n\nLet's assume our base types are:\n\n  O1, O2, ...\n\nThe grammar of (beta) normal forms is defined mutually recursively\nwith that of neutral forms:\n\n  (normal forms)   M ::= \\x.M |  | N\n  (neutral forms)  N ::= x | N M | fst N | snd N\n\nConsider the form of the body of the conditional (reduced to beta\nnormal form) at each base type Oi:\n\n  cond_Oi b x y = Mi\n\n  cond_Oi true x y = x\n  cond_Oi false x y = y\n\nAs Mi has base type it must be a neutral form. We define the head\nvariable of a neutral form as follows:\n\n      hd (x) = x\n    hd (N M) = hd N\n  hd (fst N) = hd N\n  hd (snd N) = hd N\n\nIt's not difficult to show that hd Mi = b (it can't be free, x, or y,\nso it must be b).\n\nBy induction over the structure of typing derivations we can show\nthat: if G |- N:A and G |- hd N:T then A is a subformula of T.\n\nHence, Oi is a subformula of Boolean for every i, and Boolean must\nhave an infinite type."
email: 1d5a17fd7f2ea3c7dedc3ac240955762
