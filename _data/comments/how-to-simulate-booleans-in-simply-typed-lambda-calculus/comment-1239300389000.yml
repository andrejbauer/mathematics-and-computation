name: sam
date: '2009-04-09 20:06:29'
url: 'http://'
message: "We do get booleans if we have pairs:\r\n\r\n  type Boolean = (O -&gt; O -&gt; O, I -&gt; I -&gt; I)\r\n\r\n   true = (\\x y -&gt; x, \\x y -&gt; x)\r\n  false = (\\x y -&gt; y, \\x y -&gt; y)\r\n\r\n  ...\r\n\r\nthough the Boolean type now also includes the nonsense terms\r\n\r\n  (\\x y -&gt; x, \\x y -&gt; y)  and  (\\x y -&gt; y, \\x y -&gt; x)\r\n\r\nWe can prove that it is impossible to define booleans without pairs.\r\nSuppose we have the two base types: O and I, a type Boolean, closed terms\r\ntrue and false, and for every type t a closed term cond_t such that:\r\n\r\n    true :: Boolean\r\n   false :: Boolean\r\n  cond_t :: Boolean -&gt; t -&gt; t -&gt; t\r\n\r\n   cond_t true x y = x\r\n  cond_t false x y = y\r\n\r\nLet's consider the body, M, of cond_O.\r\n\r\n  cond_O :: Boolean -&gt; O -&gt; O -&gt; O\r\n  cond_O = \\b x y.M\r\n\r\nWithout loss of generality we can assume that M is in beta-normal\r\nform. As M has base type it cannot be a lambda, so it must be of the\r\nform:\r\n\r\n  z M1 ... Mn\r\n\r\nfor some variable z and terms M1, ... Mn. Now, z cannot be a free\r\nvariable as then we would have:\r\n\r\n  cond_O true x y = z M1 ... Mn =/= x\r\n\r\nSo z must be b, x or y. If it were x or y then n would have to be 0 as\r\nx and y have base type. In the former case this gives\r\n\r\n  cond_O false x y = x =/= y\r\n\r\nand in the latter\r\n\r\n  cond_O true x y = y =/= x\r\n\r\nTherefore it must be the case that z = b. So\r\n\r\n  cond_O b x y = b M1 ... Mn : O\r\n\r\nHence, for some types t1, ..., tn\r\n\r\n  Boolean = t1 -&gt; ... -&gt; tn -&gt; O\r\n\r\nThe same argument applied to cond_I means that for some types t1',\r\n..., tm':\r\n\r\n  Boolean = t1' -&gt; ... -&gt; tm' -&gt; I\r\n\r\nwhich gives a contradiction."
email: 1d5a17fd7f2ea3c7dedc3ac240955762
