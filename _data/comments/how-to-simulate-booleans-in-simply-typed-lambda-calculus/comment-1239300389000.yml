name: sam
date: '2009-04-09 20:06:29'
url: 'http://'
message: "We do get booleans if we have pairs:\n\n  type Boolean = (O -&gt; O -&gt; O, I -&gt; I -&gt; I)\n\n   true = (\\x y -&gt; x, \\x y -&gt; x)\n  false = (\\x y -&gt; y, \\x y -&gt; y)\n\n  ...\n\nthough the Boolean type now also includes the nonsense terms\n\n  (\\x y -&gt; x, \\x y -&gt; y)  and  (\\x y -&gt; y, \\x y -&gt; x)\n\nWe can prove that it is impossible to define booleans without pairs.\nSuppose we have the two base types: O and I, a type Boolean, closed terms\ntrue and false, and for every type t a closed term cond_t such that:\n\n    true :: Boolean\n   false :: Boolean\n  cond_t :: Boolean -&gt; t -&gt; t -&gt; t\n\n   cond_t true x y = x\n  cond_t false x y = y\n\nLet's consider the body, M, of cond_O.\n\n  cond_O :: Boolean -&gt; O -&gt; O -&gt; O\n  cond_O = \\b x y.M\n\nWithout loss of generality we can assume that M is in beta-normal\nform. As M has base type it cannot be a lambda, so it must be of the\nform:\n\n  z M1 ... Mn\n\nfor some variable z and terms M1, ... Mn. Now, z cannot be a free\nvariable as then we would have:\n\n  cond_O true x y = z M1 ... Mn =/= x\n\nSo z must be b, x or y. If it were x or y then n would have to be 0 as\nx and y have base type. In the former case this gives\n\n  cond_O false x y = x =/= y\n\nand in the latter\n\n  cond_O true x y = y =/= x\n\nTherefore it must be the case that z = b. So\n\n  cond_O b x y = b M1 ... Mn : O\n\nHence, for some types t1, ..., tn\n\n  Boolean = t1 -&gt; ... -&gt; tn -&gt; O\n\nThe same argument applied to cond_I means that for some types t1',\n..., tm':\n\n  Boolean = t1' -&gt; ... -&gt; tm' -&gt; I\n\nwhich gives a contradiction."
email: 1d5a17fd7f2ea3c7dedc3ac240955762
