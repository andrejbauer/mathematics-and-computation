name: Andrej Bauer
date: '2011-01-22 12:23:26'
url: 'http://andrej.com/'
message: "Inefficiency of code extracted by Coq would be a serious obstacle here. Maybe the <code>Program</code> facility in Coq could help, up to a point. Alg uses a combination of imperative features and continuations for good performance. Performance is everything in this case. I would even venture to say that performance comes first and correctness second. I know it is a heretic thought, but which is more useful an unusably slow correct program or a fast mostly correct program? The way to go is to add double-checks and to have several alternative implementations whose results can be compared against each other.\n\nAlso, I am not sure Coq would actually help catching all the errors. For example, here is a buggy function that tells whether an equation is the law of associativity:\n[sourcecode gutter=\"false\"]\nlet is_assoc = function\n  | (Binary (op1, Binary (op2, Var a1, Var b1), Var c1), Binary (op3, Var a2, Binary (op4, Var b2, Var c2)))\n  | (Binary (op3, Var a2, Binary (op4, Var b2, Var c2)), Binary (op1, Binary (op2, Var a1, Var b1), Var c1))\n  when op1 = op2 &amp;&amp; op2 = op3 &amp;&amp; op3 = op4 &amp;&amp; a1 = a2 &amp;&amp; b1 = b2 &amp;&amp; c1 = c2 -&gt; true\n  | _ -&gt; false\n[/sourcecode]\nCan you spot the error? How would Coq help finding the bug in this case?"
email: 59d57d95bc7c45ced5f1969279cec06b
