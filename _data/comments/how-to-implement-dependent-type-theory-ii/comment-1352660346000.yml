name: Noam Zeilberger
date: '2012-11-11 19:59:06'
url: 'http://www.math.ias.edu/~nzeilberger/'
message: "Hello Andrej.  I'm not sure what you mean by \"other benefits\" of normalization-by-evaluation -- providing a normal form is benefit enough!  The point is that <i>normal forms</i> are useful for many reasons, and NbE is a concise way of describing a strategy for calculating them directly.  In contrast, naively applying rewriting rules in the hopes of eventually reaching a normal form is often an inefficient way of performing normalization...and sometimes it doesn't even work: to guarantee that an arbitrary rewriting strategy will terminate you need a strong normalization result, and in some situations SN fails.  A well-known example is <a href=\"http://www.pps.jussieu.fr/~mellies/papers/substitution.ps\" rel=\"nofollow\">lambda calculus with explicit substitutions</a>, but at an even more basic level SN fails in the presence of eta laws if you interpret eta by expansion, which is a more natural direction than eta-reduction.\n\n[On the other hand, <i>having</i> a rewriting relation on terms (rather than a mere normalization procedure) is useful in itself for reasoning about programs, so long as you know that this rewriting relation is well-behaved (e.g., respected by evaluation).]\n\nAs for the stack overflow, one way you could get rid of it is by porting your implementation to Standard ML :)  Actually that's only half joking: the point is that with NbE, your object language may depend on semantic features of the meta language (in particular of its function spaces).  John Reynolds <a href=\"http://cs.au.dk/~hosc/local/HOSC-11-4-pp363-397.pdf\" rel=\"nofollow\">pointed out this problem 30 years ago</a>, and also provided a recipe for addressing it by systematically converting a higher-order definitional interpreter into a first-order abstract machine (via CPS conversion + closure conversion and/or defunctionalization, a mantra which Olivier Danvy and company have been driving home for the last decade).\n\nAlthough they do not explicitly <i>derive</i> their abstract machine from an NbE procedure but only provide the end result, you may be interested in reading Altenkirch and Chapman's <a href=\"http://www.cs.nott.ac.uk/~txa/publ/jtait07.pdf\" rel=\"nofollow\">Big-step normalisation</a>, which goes through the task of writing a provably correct environment machine for a lambda calculus with explicit substitutions in Agda."
email: 7b68fe8430e6f17438509e81c62eca96
