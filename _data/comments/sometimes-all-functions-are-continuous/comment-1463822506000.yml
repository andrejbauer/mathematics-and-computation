name: Andrej Bauer
date: '2016-05-21 11:21:46'
url: 'http://andrej.com/'
message: "@Ben: I do not like your argumentative style and I am not going to have a pointless discussion about \"who are the experts\". I am trying to be kind here and I am providing you with references and examples that will further your understanding of the subject, so perhaps you can tone things down a little.\r\n\r\nPCF is a reasonable model of computation, there is absolutely no doubt about that. It is an extension of the simply typed $\\lambda$-calculus with natural numbers and general recursion. Modern functional programming languages (notably Haskell) are directly based on ideas developed through PCF. It is Turing complete in the sense that it is equivalent to Turing machines (Turing machines can simlate PCF and vice versa). Yet, when it comes to higher-type computation, Turing machines and PCF differ.\r\n\r\nType II computation has infinite inputs and outputs. A Turing machine has an infinite tape. These facts should be understood not as \"we are doing actual infinite things\" but that the resources, inputs and outputs are potentially unlimited. Type II computability models certain situations better than Type I. For instance, imagine a physics experiment which produces an unending sequence of 0's and 1's (for instance by listening to the cosmic radiation). A machine which processes this sort of input is better modeled by Type II (i.e., the infnite input is written on an infinite tape) than Type I (the input tape contains the GÃ¶del code of a Turing machine that calculates the stream of 0's and 1's). This is why people are interested in Type II: not to discuss \"truly infinite\" data but to discuss \"potentiall unbounded data which arrives as a sequence of bits\".\r\n\r\nAll of this does not matter because I can easily give examples of models of computation which are equivalent to Turing machines (can be simulated by and can simluate Turing machines) but differ in higher-type computation.\r\n\r\nI think this has been as much of an explanation I can give in these comments. I refer you to the excellent book <a href=\"http://www.springer.com/cn/book/9783662479919\" rel=\"nofollow\">Higher-Order Computability</a> by John Longley and Dag Normann. As a point of reference, I consider them to be <strong>the experts</strong> on the topic."
email: 59d57d95bc7c45ced5f1969279cec06b
