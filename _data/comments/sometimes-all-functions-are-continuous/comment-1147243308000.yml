name: roconnor
date: '2006-05-10 08:41:48'
url: 'http://www.livejournal.com/users/r6/'
message: "I ported the code to Haskell, and now I clearly see what is going on.  Although it is essentially written in the pure lambda calculus one is still forced inside the continuation monad (of course).  This means the type of m becomes\n<pre>((a -&gt; Cont a b) -&gt; Cont a t) -&gt; (a -&gt; Cont a b) -&gt; a</pre>\nwhere a is something like Integer.\n\nSo the input are functions and functionals that are Kleisli arrows rather than pure function arrows.\nThis type is basically a nice way of writing\n<pre>((a -&gt; (b-&gt;a)-&gt;a) -&gt; (t-&gt;a)-&gt;a) -&gt; (a -&gt; (b-&gt;a)-&gt;a) -&gt; a</pre>\nContinuations are a nice way of bumping up the order of the type. ;)\n\nFor those interested, here is the code:\n\n<pre>\nimport Control.Monad.Cont\nm f x = runCont (search 0) id\n  where\n   search n =\n    callCC (\\\\k -&gt; do {f (\\\\j -&gt; if j < n then x j else k=&lt;&lt;(search (n+1)));\n                      return n})\n</pre></pre>"
email: fab61c13db29a1c73460ab0a9cb47565
