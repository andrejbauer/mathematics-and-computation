name: Paul Taylor
date: '2012-10-02 18:39:09'
url: 'http://www.paultaylor.eu'
message: "Let me try to give a bit more explanation of the construction of a category from syntax that is described at length in my book and also answer my own question about why the interpretation  in another category defines a functor.\r\n\r\nThe antecedents of this construction include <b>clones</b> in universal algebra and <b>classifying toposes</b> in geometric model theory, but I called it the <b>category of contexts and substitutions</b> in line with the tradition of referring to the <b>category of widgets and homomorphisms</b>.\r\n\r\nPeople originally took individual types as the objects, but the relationship with syntax is made much more fluently if we use <b>contexts</b> instead, ie lists of variables together with their (possibly dependent) types. The lazy way of describing the morphisms is as strings of terms.\r\n\r\nThe difficulty with formalising this, particularly for dependent types, is that we need to mix up <b>recursion</b> for the type theory with <b>associativity</b> for categories.   Anyone who has tried to write programs for associative operations will know that this is a mess.\r\n\r\nTo solve this problem I used an <b>elementary sketch</b>.  Traditionally, sketches (esquisses in French) were used to describe categories of models of theories that involve limits and colimits.   The journal <a href=\"http://www.numdam.org/numdam-bin/browse?j=DIA\" rel=\"nofollow\"><i>Diagrammes</i></a> includes a lot of work about them. <a href=\"http://www.math.unicaen.fr/~ageron/recherche.html\" rel=\"nofollow\">Pierre Ageron</a> extended these ideas to exponentials in a way that could probably deal with most of the ideas in type theory in a purely categorical way, but unfortunately never developed his work.\r\n\r\nHowever, my idea only uses sketches in their simplest form, without limits, colimits, exponentials or anything else that invokes new objects. Every object (context) of the intended category is given as a node of the sketch. Then there are two classes of arrows and five equations (commutative diagrams), giving generators and relations for the morphisms.\r\n\r\nIn detail, the sketch has\r\n\r\n-- a node for each context of the language,\r\n-- an arrow $\\hat x:[\\Gamma,x:X]\\to\\Gamma$ called a <b>display map</b>   for each type-in-context $\\Gamma\\vdash X$,\r\n-- an arrow $[a/x]:\\Gamma\\to[\\Gamma,x:X]$ for each term   $\\Gamma\\vdash a:X$, and\r\n-- five families of equations, the most complicated of which    is the <b>substitution lemma</b> above.\r\n\r\n\r\nThe substitution lemma is the square on the left in the diagram above and the other square says that terms commute with displays; these are both pullbacks. Displays commute with each other and form the pullback or fibre product of the types over the context.\r\n\r\nHowever, the proof that these squares are pullbacks in the dependent case is delicate, making repeated use of the pullback lemma in a particular sequence of ways.\r\n\r\nAll of this structure is exploited in the final chapter of the book to provide a fluent translation between diagrams and syntax, so that the universal properties of the former correspond exactly to the proof rules for the latter.\r\n\r\nHowever, since I was still rather biassed towards diagrams and against syntax when I wrote the book, I did not actually spell out what it is to be an <b>interpretation</b> of a type theoretic language in a category. I simply took this to be a structure-preserving functor from the category of contexts and substitutions.\r\n\r\nWe can rectify this, but as with substitution as pullback we have to do the construction in a specific order.\r\n\r\nWe have to define a functor from the category generated by a sketch, for which we need to give its effect on nodes and arrows in such a way that the equations hold.\r\n\r\nFor dependent types at the algebraic level, ie without $\\Pi$, $\\Sigma$ etc, the semantic structure that is required is a <b>category with display maps</b>, ie a class of maps that is closed under pullback against arbitrary maps. This provides the object part of the interpretation, for types and contexts, and the display maps that link them.\r\n\r\nNow we need to fill in the interpretations of the terms, as sections of the display maps that interpret their types-in-context. The operation-symbols (which we understand as having variables as their arguments) have given meanings as morphisms of the semantic category.\r\n\r\nOther terms are obtained by substitution of sub-terms for variables in the outermost operation-symbol. \r\n\r\nThe result of such a substitution is the top left map in the diagram.  This map is the mediator to the right-hand pullback such that the composite along the top is the identity. This makes the left-hand square commute, indeed it is a pullback.\r\n\r\nThe pullback square that captures the substitution lemma is therefore the <b>definition</b> of substitution and its image in the semantic category is the definition of the interpretation of a expression that consists of an operation-symbol applied to sub-terms.\r\n\r\nIn particular, this square commutes, as required.  We have also made the other squares, capturing the simpler equations, commute too."
email: 24674efd7c9de6dad323b394fbdf2ebd
