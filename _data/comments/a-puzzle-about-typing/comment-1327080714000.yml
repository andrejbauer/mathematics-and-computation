name: Kevin Watkins
date: '2012-01-20 18:31:54'
url: ''
message: "I don't know about \"easiest\", but here's one way.\n\nLet's think about what type inference does with such a term.  For each term $s$ that occurs as a subterm or a bound variable, let $T(s)$ be the type variable associated with s during type inference.  Then type inference generates equations of the two forms\n$$T(a) = T(b) \\to T(ab)$$\nand\n$$T(\\lambda x.a) = T(x) \\to T(a)$$\nNow totally order occurrences of subterms by traversing the tree of occurrences generally from right to left, but where each application node is traversed <em>before</em> its children, and each abstraction node is traversed <em>after</em> its children.  This totally orders the occurrences.\nNow since each term $s$ in a $T(s)$ occurs at most once, the total order on occurrences induces a total order on the $T(s)$ (where we also traverse any $T(x)$ for a bound variable that has no occurrence before the $T(\\lambda x.a)$ that binds it).\n\nObserve that this total order puts the left side of each equation after both terms on the right side.  So the system of equations can be solved in that order.\n\nIn your example $\\lambda a.\\lambda b.\\lambda c.(a b) (\\lambda d. d c)$, the order is as follows:\n\n<code>\nT((a b) (\\d. d c)) unconstrained (call it 'd)\nT(d c) unconstrained (call it 'c)\nT(c) unconstrained (call it 'b)\nT(d) = T(c) -&gt; T(d c)\nT(\\d. d c) = T(d) -&gt; T(d c)\nT(a b) = T(\\d. d c) -&gt; T((a b) (\\d. d c))\nT(b) unconstrained (call it 'a)\nT(a) = T(b) -&gt; T(a b)\nT(\\c.(a b) (\\d. d c)) = T(c) -&gt; T((a b) (\\d. d c))\nT(\\b.\\c.(a b) (\\d. d c)) = T(b) -&gt; T(\\c.(a b) (\\d. d c))\nT(\\a.\\b.\\c.(a b) (\\d. d c)) = T(a) -&gt; T(\\b.\\c.(a b) (\\d. d c))\n</code>\n\nWe can also use this analysis to figure out how many type variables the solution will have, by counting the number of type variables and equations (exercise)."
email: a1bb0ffc24dcde124266914e6a0c9c08
