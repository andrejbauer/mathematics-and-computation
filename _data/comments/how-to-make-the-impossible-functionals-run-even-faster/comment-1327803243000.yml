name: Ralph Loader
date: '2012-01-29 03:14:03'
url: ''
message: "In the pure functional case, the epsilon one gets is not just any epsilon - it is a minimization function.\n\nTo be precise, for the examples I've seen, there is a \"search order\" on Int (not necessarily the usual order, not necessarily well-founded).  The order on Int then induces a lexicographical partial-order on (Int-&gt;Bool) (which is only a total order if the search-order is well-founded).\n\nThe search functionals (Cantor-&gt;Bool)-&gt;Cantor then I believe return the minimum (not just a minimal!) element for which the predicate holds (or the max. element if the predicate is empty).  [That is true if all the examples I've seen written down, one can twist them so they do not, e.g., remapping Cantor-&gt;Cantor by flipping odd-numbered bits.]\n\nAnd one can make the search functional parametrised by the search-order Int-&gt;Int-&gt;Bool, giving a parametrised minimisation operator (Int-&gt;Int-&gt;Bool) -&gt; ((Int-&gt;Bool) -&gt; Bool) -&gt; Int-&gt;Bool.\n\nQuestion: do all PCF-definable search functionals (Cantor-&gt;Bool)-&gt;Cantor minimise w.r.t. some [not PCF-definable] partial-order on Cantor? (I guess one should ask for the order to be on the extensional quotient of the total objects.)\n\nIt is not obvious to me whether or not one can do minimisation using the kind of \"memoisation\" techniques that speed up search in the non-functional case.\n\nQuestion: in your favourite non-fully-abstract model of PCF, do there exist parametrised minimisation operators of the type above? [Conjecture - none will not exist in the stable model, but will exist in the continuous model.]"
email: 9156b3816bb7b727fe03b8f20ddc9bdd
