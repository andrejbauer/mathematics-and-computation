name: Andrej Bauer
date: '2013-03-17 16:45:32'
url: 'http://andrej.com/'
message: "Yes, in type theory $\\mathtt{Bool}$ is the type with two elements that can be discerned, i.e., $\\mathtt{True} \\neq \\mathtt{False}$ and for all $p : \\mathtt{Bool}$ either $p = \\mathtt{True}$ or $p = \\mathtt{False}$.\r\n\r\nBut you got $\\mathtt{Prop}$ wrong. First of all, it is not clear what you mean when you say that \"$\\mathtt{Prop}$ is the universe containing the unit and the empty type\". It is crucial to write down a precise definition. For example, if by this you mean $\\mathtt{Prop} = \\Sigma (t : \\mathtt{Type}), (t = \\mathtt{unit}) + (t = \\mathtt{empty})$ then you have just defined something equivalent to $\\mathtt{Bool}$. But that is not what $\\mathtt{Prop}$ is in type theory. Instead, it has to be defined as those type which have at most one element: $$\\mathtt{Prop} = \\Sigma (t : \\mathtt{Type}), \\Pi (x y : t), x = y.$$\r\nNow you cannot show that $\\mathtt{Prop}$ is equivalent to $\\mathtt{Bool}$, and indeed there are models where it is not. Lastly, you ask whether $\\mathtt{Prop}$ is the subobject classifier ($\\mathtt{Bool}$ of course is not, unless excluded middle holds). That depends on what you mean by \"subobject\" in type theory. There is a notion of subobject for which $\\mathtt{Prop}$ is indeed a subobject classifier, namely $f : A \\to B$ is a subobject if the homotopy fibers of $f$ are propositions in the above sense. In contrast, a pure propositions-as-types way of doing things would be to take every dependent sum as a subobject, in which case $\\mathtt{Type}$ will be the subobject classifier.\r\n\r\nA last word of warning: $\\mathtt{Prop}$ is not a small type, i.e., it need not be contained in any universe. So it is a \"large\" classifier, and we have to keep this in mind when working with it."
email: 59d57d95bc7c45ced5f1969279cec06b
