name: Matt Oliveri
date: '2016-08-26 18:08:42'
url: ''
message: "&gt; Instead of trusting the LCF-style kernel, I would have to trust the software verification tool that has formally checked the LCF-style kernel.\r\n\r\nBut that's not true. The system that verifies the proof checker may have flaws that cause it to accept invalid proofs, but the verification of the proof checker could still be valid. At worst, you need to trust one verification of the proof checker. You might trust it even without machine checking! The fact that it's been machine checked can only make it more trustworthy, not less. But you don't even need to trust <i>that</i> verification, because you can demand multiple independent verification efforts, all possibly machine checked with different tools. This is what I meant by \"held to any standard of rigor of your choice\".\r\n\r\nWe're talking about bootstrapping trust. You estimate the probability that a flaw in the proof checker exists (but has thus far escaped detection). The more verifications you do, the smaller you should estimate that probability to be.\r\n\r\n&gt; Eventually the trust must come from my own intuitive understanding.\r\n\r\nIntuition should be a part of it, but so should science. Making a simpler checker does not decrease the likelihood of a flaw as much as a formal verification does. (Rule of thumb.) When Flit was made, formally verifying a proof checker was still beyond the state of the art.\r\n\r\n&gt; Even if I have inspected the kernel and am satisfied about its correctness, the environment in which the kernel runs might foul up things.\r\n\r\nSo demand that the environment be part of the system that gets verified. You can verify a proof checker and its runtime environment down to machine code. This has been done. (Well, they've not run these systems right over the metal, AFAIK, so in a sense we're not there yet, but we have everything we need.)\r\n\r\n&gt; The QED manifesto puts it nicely...\r\n\r\nYou can use a totally-comprehended proof checker like that to check a verification of the \"real\" proof checker. But I expect that day-to-day use of such a simple checker would be too painful. Moreover, once the real proof checker has been verified to your satisfaction, you've bootstrapped trust, so I don't see why it would be necessary to recheck proofs with such a simple checker. The real proof checker is by now <i>more</i> trustworthy than the simple bootstrap checkers."
email: 66cbd251bde282eb2e1584080e3604ea
