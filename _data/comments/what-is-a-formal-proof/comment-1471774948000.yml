name: Günter Rote
date: '2016-08-21 12:22:28'
url: ''
message: "\"But the topic of Mike and Andrej’s blog posts is the requirements for proof representations used in actual, implemented proof tools.\"\n\nMy impression is that, currently, proof representations used in actual, implemented proof tools (and also published formal proof representations) are predominantly representations from which some particular piece of software was able to reconstruct a full derivation at some point (in finite but otherwise unspecified time). And Andrej, when arguing that this (re-)construction work should not be required to be decidable, seems to be fine with this sorry state of affairs, as I would call it.\n\nI don't want to insult the people who are doing great work in proof assistants, as an outsider, but the discussion is about requirements and goals for the future.\n\nAgain I am stressing the distinction between the proof script by which a proof was first FOUND, and the \"representation\" by which it is STORED and COMMUNICATED once it is found, in order to be REPLICATED. (Which of the two representations is the blog post about?) For the latter representation, I would impose not just decidability but rather stringent runtime bounds.\n\nI have the feeling that by accepting undecidable argument steps, formal proofs would fall behind even classical pencil-and-paper proofs. Here is the analogy: If you think about proving a theorem, you have no clue about how and whether you will succeed, but once you have succeeded you WRITE DOWN THE PROOF in such a way the other people can follow it without having to face the same undecidable problem that you started with."
email: b54b65b0004307f1314ad51c2f408045
