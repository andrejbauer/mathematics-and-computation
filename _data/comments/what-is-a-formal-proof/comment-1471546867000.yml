name: Matt Oliveri
date: '2016-08-18 21:01:07'
url: ''
message: "There are two major types of work a proof script might do. One is replaying and checking proof steps. The other is <i>searching</i> for the winning proof steps in the first place. Because tactic languages are good for implementing both of these, it's tempting to just dump them together. This can lead to proof scripts which take longer to check than derivations. But it's not because LCF-style proof checking is slower, it's because you're comparing proof checking to proof search! Of course proof search is slower.\r\n\r\nI believe a tactic system should support a \"phase distinction\" between \"search-time\" tactics and \"check-time\" tactics. Search time tactics will be implemented such that running them records equivalent check-time scripts, but that have additional witnesses and/or annotations to avoid redoing the search.\r\n\r\nIt's these check-time scripts, which are free of calls to expensive, searchy tactics, that check more quickly than derivations. Why? Think of video playback. Playing uncompressed video should be the fastest, right? After all, decoding is trivial. Nope. Playing uncompressed video is infeasible. It hits an I/O bottleneck <i>hard</i>. The frames <i>must</i> be computed on the fly; there's no practical alternative.\r\n(Analogy warning: Unlike video compression, proof scripts do not lose any information you care about.)\r\n\r\nWith proofs, the I/O disparity is less big, but in exchange, the decoding of \"compressed derivations\" is easy. A check-time script checker and a derivation checker would be doing mostly the same work, aside from I/O, where the derivation checker has to work harder."
email: 66cbd251bde282eb2e1584080e3604ea
