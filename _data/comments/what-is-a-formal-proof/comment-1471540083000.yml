name: Matt Oliveri
date: '2016-08-18 19:08:03'
url: ''
message: "Günter said:\n&gt; Andrey writes about formal proofs that “little or nothing is gained by storing them or re-verifying their complete forms.” Yes, we gain (A) confidence: Let the (complicated) system that produced the proof be buggy; as long as the verifier accepts the proof, this particular proof is fine.\n\nIn LCF style, the complicated system producing a proof is some jumble of user tactics and proof script, not the kernel (\"nucleus\"). If the (simple) kernel is correct, it will reject an invalid proof as it's being produced. There's no need to build a derivation tree to look at the elementary steps of a proof.\n\nIt's possible that the kernel is buggy. But it's just as likely that an independent derivation validator would be buggy. They have the same checks to perform.\n\nAndrej said:\n&gt; So I do not actually believe that there is anything to be gained by producing complete derivation trees. It does not increase confidence in anythign. What <i>does</i> increase confidence is an independent implementation of the nucleus.\n\nI think an independent checker of derivation trees would increase confidence a little. But an independent implementation of the trusted kernel <i>is</i> a better way to boost confidence.\n\nIn both cases, we have two programs giving a proof the OK, instead of one. In both cases, we reuse the proof script and the tactic library that it's based on. Avoiding actual derivation trees avoids possible bugs in serializing and deserializing derivations. (And, of course, makes things significantly faster.)"
email: 66cbd251bde282eb2e1584080e3604ea
