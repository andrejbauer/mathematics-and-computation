name: Matt Oliveri
date: '2016-08-29 06:40:26'
url: ''
message: "&gt; Coqine produces from the .vo file a Dedukti file of a proof that Dedukti can check. It follows that this file must be a proof object and not a proof script. (Dedukti certainly does not have Coqâ€™ proof searching techniques built in, and such techniques can also not be described to Dedukti as part of the logic specification, I suppose.)\r\n\r\nBut Coq type-checking involves normalization of Gallina terms. (Gallina is Coq's term language.) Gallina is rich enough to express proof search algorithms, if you give a limit on search depth. So Coq's type-checker can be convinced to do proof search, although it's not a good idea. (But programming the type-checker to do more reasonable check-time things is a technique that is actually used in the Coq community. It's a hackish form of proof by \"computational reflection\".)\r\n\r\nWhat seems to be the case (from your comments about CoqInE) is that CoqInE is indeed a more-or-less straightforward encoding of Coq's proof terms into Dedukti. They are both able to bring practically any algorithm to bear on proof checking. This is why I was surprised you accepted these proof terms as a proof object representation.\r\n\r\nIt looks like you're trying to put together an argument that .vo's are a good proof object representation. Since I don't understand what you consider to be a good proof object representation, I cannot dispute it. But I can point out that you seem to be assuming that .vo checking is computationally very limited, when in fact it's not. In principle, Gallina's richness means terms are already funny-looking proof scripts. In practice, Gallina is a crummy language for proof scripts. But that's another discussion."
email: 66cbd251bde282eb2e1584080e3604ea
