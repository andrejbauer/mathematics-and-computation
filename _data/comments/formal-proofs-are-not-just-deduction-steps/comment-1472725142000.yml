name: Matt Oliveri
date: '2016-09-01 12:19:02'
url: ''
message: "<blockquote>I disagree with this, because I think there are very good reasons to encode computation as normalization: by keeping full computation out of the kernel, we get stronger properties for it (such as the decidability of typechecking), which makes giving reasonable declarative specifications of important features like type inference feasible.</blockquote>\n\nI think you're confusing properties of the logic with properties of the proof assistant. A <i>logic</i> may or may not have decidable judgments; a <i>proof assistant</i> may or may not allow arbitrary computation in the kernel. But maybe I'm being too pedantic; they seem to be correlated.\n\nDo you dislike undecidable type-checking? Do you have any defense of decidable type-checking besides \"feasible\" type inference? Do you have an argument that type inference cannot be \"feasible\" for any type system that's not decidable? Or was decidability just an example of a property you get by crippling the computational content of type theory? (These are not rhetorical questions, and I don't mean to pick on you. This is the first time I've run into anyone who seems willing to defend decidable MLTT in a discussion.)"
email: 66cbd251bde282eb2e1584080e3604ea
