name: Neel Krishnaswami
date: '2016-08-31 14:32:15'
url: 'http://semantic-domain.blogspot.com'
message: "<blockquote>If we really do believe that computation is basic then\nproof checkers should allow general and explicit computation inside\nthe trusted core.</blockquote>\n\nCertainly not!\n\nI have moved away from the LCF/Nuprl style[*] and now actively prefer\nwhat Bob would call axiomatic or formal type theory with a normalizing\nnotion of judgmental equality. \n\nTo be usable in practice, a proof assistant needs a bunch of\nconvenience features like type inference, pattern matching,\noverloading, proof search, and so on. However, I think it is a bad\nidea to implement these features by LCF style elaboration on top of a\nNuprl-style core. This approach works great for verifying that a\ncomplete proof is correct, but most of the time, our \"proof\" objects\nare either incomplete or actively wrong. So we need very strong\nguarantees about broken proofs even more than we do for correct\nproofs.\n\nType inference offers a very good example of the issues\ninvolved. Suppose we are doing type inference, and know that a\nvariable has type A ? B and that it is being used at X ? Y. To check\nthis, we must check for the judgmental equality of these types, and\nalgorithmically we want to proceed by checking that A = X and B = Y.\nThat is, we want judgemental equality to be injective for the function\ntype constructor, which in Nuprl is obviously false: for example,\nconsider (x:0) ? String and (x:0) ? Bool, which are equated in Nuprl's\nmodel of the universe.\n\nIn contrast, in pure MLTT, the injectivity of the ?-former is an\nadmissible property of judgemental equality. As a result, a type\ninference procedure that relies upon this property will be complete\n(at least in this respect), and so a failure of type inference will\nreflect a genuine type error rather than a mere failure of a\nheuristic.\n\nThe fragility resulting from heuristic tactics is not hypothetical:\nGeorge Gonthier's proof of the four colour theorem no longer builds on\nmodern versions of Coq, due to small changes in how elaboration\nworks. (Still more inconceivable would be porting his proof to a\nsystem like Matita, despite it having the same kernel logic as Coq!)\n\nBasically, for a proof to be bearable, we need a bunch of convenience\nfeatures. Specifying these features in a reasonably declarative way\nrequires specifying when they *don't* work just as much as when they\ndo, and doing this in a implementable way requires a bunch of\nadmissible properties from the kernel type theory, most of which do\nnot hold in Nuprl-style calculi.\n\n[*] I have not, of course, rejected Nuprl-style semantics. For\nexample, it would be impossible to prove the decidability of\ntypechecking for the formal theories I prefer without logical\nrelations/realizability models. (Alas, usually two such models!)"
email: 092b7830019ff042b16d4d74643d4e83
