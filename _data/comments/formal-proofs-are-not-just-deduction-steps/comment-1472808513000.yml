name: Neel Krishnaswami
date: '2016-09-02 11:28:33'
url: 'http://semantic-domain.blogspot.com'
message: "<blockquote>You still misunderstand what I am saying. All of what I am saying is completely agnostic about what particular formalism you want to use. Perhaps this will help: I am saying, among other things, that the user should be allowed to write programs that generate (missing parts of) terms which then get type-checked by the kernel. </blockquote>\r\n\r\nI do indeed disagree with this. If you need to write a program which generates proof terms, then the proof assistant's logic has failed to match a natural mode of reasoning. What about new logics? Well, you basically answer the question yourself:\r\n\r\n<blockquote>People “invent” techniques for Agda and Coq where they proudly present some trickery that makes Agda normalize less stuff and therefore it works faster (various forms of reflection, for instance).  It may all be very clever, but it begs the question: are they not just fighting the built-in normalization procedure?</blockquote>\r\n\r\nAll this amounts to is building a model for some little logic, working internally for a bit, and then taking an external view at the end. You and I do all the time on paper (for instance, we feel free to define functions with lambda-notation, because Set is a CCC). I think this is a reasonable thing to do, and should actually be more convenient than it currently is in Agda/Coq. \r\n\r\nIn fact, I wish people did it more on paper, too -- eg, see <a href=\"https://terrytao.wordpress.com/2015/09/29/275a-notes-0-foundations-of-probability-theory/\" rel=\"nofollow\">Terry Tao's notes on probability theory</a>, which read to me as if he really just wants to work in the internal logic of the presheaf category on the category of probability spaces and extensions. (It really looks like the semantics of Algol!)"
email: 092b7830019ff042b16d4d74643d4e83
