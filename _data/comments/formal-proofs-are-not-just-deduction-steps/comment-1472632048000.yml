name: Andrej Bauer
date: '2016-08-31 10:27:28'
url: 'http://andrej.com/'
message: "Why does computation have to be deterministic? For instance, suppose Coq impliements a multi-core kernel which runs things in parallel. That is going to be non-deterministic. Of course, my entire post is devoted to saying that you <em>do not</em> need the entire trace. What does the trace buy you, exactly? It does not buy you trust, nor does it buy you efficiency. You say \"if somebody gives you the input and the output\" but I do not understand where that came from. I explicitly talk about \"somebody giving you a program to run\".\r\n\r\nThe argument that non-deterministic computation may be exponential is bogus. Deterministic computation can be exponential as well.\r\n\r\nNon-determinstic computation may be quite desirable, especially in situations where you do not care which witness is found. Correctness of such computations is a separate issue which needs to be addressed - but certainly not by forcing everything to be deterministic.\r\n\r\nAs for computation being a chain of equations: everything is wrong with that because it prevents us from thinking about computation as an independent concept. Consequently, we do not have a good notion of <em>transformation</em> of computation (like we do for inductively defined structures such as formal derivations)."
email: 59d57d95bc7c45ced5f1969279cec06b
