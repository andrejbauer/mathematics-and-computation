name: Martin EscardÃ³
date: '2008-11-19 19:24:57'
url: 'http://www.cs.bham.ac.uk/~mhe/'
message: "I wrote a note (in 1998) that considers ticks, and has a monad for that.\r\n\r\nhttp://www.cs.bham.ac.uk/~mhe/papers/metricpcf.pdf\r\n\r\nI would define, in Haskell, corresponding to the above note, \r\n\r\ndata T a = Stop a | Delay(T a)\r\n\r\ninstance Monad T where\r\n  return = eta\r\n  xs &gt;&gt;= f = mu(t f xs)\r\n\r\neta :: a -&gt; T a\r\neta x = Stop x\r\n\r\nmu :: T(T a) -&gt; T a\r\nmu(Stop xs) = xs\r\nmu(Delay xss) = Delay(mu xss)\r\n\r\nt :: (a -&gt; b) -&gt; (T a -&gt; T b)\r\nt f (Stop x) = Stop(f x)\r\nt f (Delay xs) = Delay(t f xs)\r\n\r\ntimeout :: Int -&gt; T a -&gt; Maybe a\r\ntimeout n (Stop x) = Just x\r\ntimeout 0 (Delay xs) = Nothing\r\ntimeout (n+1) (Delay xs) = timeout n xs\r\n\r\ntimeof :: T a -&gt; Int\r\ntimeof (Stop x) = 0\r\ntimeof (Delay xs) = 1 + timeof xs\r\n\r\ntimedRecursion :: (T a -&gt; T a) -&gt; T a\r\ntimedRecursion f = Delay (f (timedRecursion f))\r\n\r\nThe last one ticks once for each recursion unfolding. Notice the similarity (and difference) with lazy natural numbers. But, as the paper discusses, it is perhaps more sensible, in a call-by-name language, to tick only at ground types. Then you define, by induction on types, a new delay function (starting with delay=Delay at ground types) pointwise. The paper proves some properties of this. \r\n\r\nNotice that an infinite computation returns, rather than bottom, infty, where\r\n\r\ninfty = Delay infty.\r\n\r\nThe output type of timeof can of course (and sensibly) be replaced by the lazy natural numbers."
email: f744e9626423ff7587e25a41c2f682de
