name: Ralph Loader
date: '2012-01-28 03:28:47'
url: ''
message: "It turns out that you can give a sensible, negative, answer to my question.  find can be parametrized with a monad pretty easily e.g., [conflating Bit and Bool to save typing].\r\n[sourcecode gutter=\"false\"]\r\nmodule MFind where\r\nimport Control.Monad.State\r\n\r\nfindM :: Ord i =&gt; Monad m =&gt; ((i -&gt; m Bool) -&gt; m Bool) -&gt; (i -&gt; m Bool)\r\nfindM p n = do { x &lt;- q (findM q) ; return (not x) }  where\r\n   q a = p (\\i -&gt; if i == n then return False else\r\n                 if i &lt; n then findM p i else a i)\r\n\r\n-- Make a dummy call to (c x), where x increments by 1 each time we're called.\r\n-- Then return (c 5).\r\nfifthWithDummy :: (Integer -&gt; State Integer Bool) -&gt; State Integer Bool\r\nfifthWithDummy c = do\r\n  x &lt;- get\r\n  put (x + 1)\r\n  b &lt;- c x\r\n  if b then c 5 else c 5\r\n\r\n-- Now compare\r\n--   findM ($ 5) 0\r\n-- with\r\n--   runState (findM (fifthWithDummy) 0) 0\r\n[/sourcecode]\r\nnever returns."
email: 9156b3816bb7b727fe03b8f20ddc9bdd
