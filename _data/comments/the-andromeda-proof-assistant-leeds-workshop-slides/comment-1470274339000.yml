name: Matt Oliveri
date: '2016-08-04 03:32:19'
url: ''
message: "&gt; I don’t think there is anything to “defend” about why the relationship of LF types to object language types is analogous to that in other metalanguages: it’s literally the same, you have an LF-type that represents each judgment, just as when describing the syntax of type theory as an initial algebra for a many-sorted algebraic theory in ZF you would have a ZF-set of derivation trees for each judgment.\n\nI don't see it that way. A type of derivation trees is an inductive type. A judgment-as-type is an abstract type. Actually, I'm not sure a weak system like LF is a true requirement for judgments-as-types. What goes wrong if you assumed the same signature in Coq? It seems nothing goes wrong, because of parametricity. It makes adequacy less direct because you need to invoke parametricity. (OTOH, with LF, you're still implicitly using strong normalization.) Clearly, these abstract types are useless for carrying out metatheory internally to Gallina. After all, <i>judgments-as-types is not metatheory</i>.\n\n&gt; I think that your point is not about the relationship between types; it’s about the fact that when we describe the object language in LF using HOAS, the reason that that description is correct is a meta-theorem involving the weakness of LF (e.g. no inductive types); whereas in the case of ZF we can prove the correctness of that representation internally to ZF.\n\nI'm not sure what correctness property you're talking about. It doesn't make sense to prove adequacy internal to ZF unless you have multiple formal definitions of the language internal to ZF."
email: 66cbd251bde282eb2e1584080e3604ea
