name: Gaetan Gilbert
date: '2016-08-04 11:26:30'
url: ''
message: "&gt;I am curious how it was decided to use rules based on context joining. It seems to be the right choice *provided* you’re computing contexts “on the way up” starting at the leaves of the expression tree. But it’s typical to compute contexts “on the way down”, passing *the same* context (but with new bindings when appropriate) to each subexpression when it’s checked. Tactic systems are also usually made to work this way, or so it seems, with the context already known for any given hole that is to be filled.\n\n&gt;The standard typing rules need to be adapted for this top-down context checking, but I had assumed there would be no problem making this adaptation, since it seems standard. Does it somehow go wrong for ETT? (Works fine for Computational TT.) Or is there some other reason to go bottom-up? Please explain. Thanks!\n\nIt's because of handlers. They let us write something like this:\n&gt;try lambda x : A, raise (Error x)\n&gt;with Error e =&gt; e\n&gt;end\nwhich evaluates to a fresh free variable of type A.\nIf you compute the context on the way down you get the judgement |- x : A which is really screwed up if x is a deBruijn index and still screwed up if it's some sort of name.\n\nSee for instance\nhttps://github.com/Andromedans/andromeda/blob/8e8cbed09593b076e764db0b41e77870aad75e12/tests/error-handle-change-type.m31 (Andromeda code)\nhttps://github.com/Andromedans/andromeda/blob/8e8cbed09593b076e764db0b41e77870aad75e12/tests/error-handle-change-type.m31.ref (output before Andromeda had contexts)\n\nand\nhttps://github.com/Andromedans/andromeda/blob/8e8cbed09593b076e764db0b41e77870aad75e12/tests/handle-conjure.m31\nhttps://github.com/Andromedans/andromeda/blob/8e8cbed09593b076e764db0b41e77870aad75e12/tests/handle-conjure.m31.ref"
email: f89eb16bc8e0490e5e946bf9c8a73425
